// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: proto/gophkeep.proto

package gophkeep

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GophKeep_SaveCredentials_FullMethodName     = "/proto.GophKeep/SaveCredentials"
	GophKeep_SaveBankCredentials_FullMethodName = "/proto.GophKeep/SaveBankCredentials"
	GophKeep_SaveFile_FullMethodName            = "/proto.GophKeep/SaveFile"
	GophKeep_StartSaveFileStream_FullMethodName = "/proto.GophKeep/StartSaveFileStream"
	GophKeep_GetCredentials_FullMethodName      = "/proto.GophKeep/GetCredentials"
	GophKeep_GetBankCredentials_FullMethodName  = "/proto.GophKeep/GetBankCredentials"
	GophKeep_GetFile_FullMethodName             = "/proto.GophKeep/GetFile"
	GophKeep_ListAll_FullMethodName             = "/proto.GophKeep/ListAll"
)

// GophKeepClient is the client API for GophKeep service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeepClient interface {
	SaveCredentials(ctx context.Context, in *SaveCredentialsRequest, opts ...grpc.CallOption) (*Status, error)
	SaveBankCredentials(ctx context.Context, in *SaveBankCredentialsRequest, opts ...grpc.CallOption) (*Status, error)
	SaveFile(ctx context.Context, in *SaveFileRequest, opts ...grpc.CallOption) (*SaveFileResponse, error)
	StartSaveFileStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileChunk, Status], error)
	GetCredentials(ctx context.Context, in *GetByMetaRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
	GetBankCredentials(ctx context.Context, in *GetByMetaRequest, opts ...grpc.CallOption) (*GetBankCredentialsResponse, error)
	GetFile(ctx context.Context, in *GetByMetaRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	ListAll(ctx context.Context, in *ListAllRequest, opts ...grpc.CallOption) (*ListAllResponse, error)
}

type gophKeepClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeepClient(cc grpc.ClientConnInterface) GophKeepClient {
	return &gophKeepClient{cc}
}

func (c *gophKeepClient) SaveCredentials(ctx context.Context, in *SaveCredentialsRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, GophKeep_SaveCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeepClient) SaveBankCredentials(ctx context.Context, in *SaveBankCredentialsRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, GophKeep_SaveBankCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeepClient) SaveFile(ctx context.Context, in *SaveFileRequest, opts ...grpc.CallOption) (*SaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveFileResponse)
	err := c.cc.Invoke(ctx, GophKeep_SaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeepClient) StartSaveFileStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FileChunk, Status], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GophKeep_ServiceDesc.Streams[0], GophKeep_StartSaveFileStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, Status]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GophKeep_StartSaveFileStreamClient = grpc.BidiStreamingClient[FileChunk, Status]

func (c *gophKeepClient) GetCredentials(ctx context.Context, in *GetByMetaRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialsResponse)
	err := c.cc.Invoke(ctx, GophKeep_GetCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeepClient) GetBankCredentials(ctx context.Context, in *GetByMetaRequest, opts ...grpc.CallOption) (*GetBankCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankCredentialsResponse)
	err := c.cc.Invoke(ctx, GophKeep_GetBankCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeepClient) GetFile(ctx context.Context, in *GetByMetaRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, GophKeep_GetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeepClient) ListAll(ctx context.Context, in *ListAllRequest, opts ...grpc.CallOption) (*ListAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllResponse)
	err := c.cc.Invoke(ctx, GophKeep_ListAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophKeepServer is the server API for GophKeep service.
// All implementations must embed UnimplementedGophKeepServer
// for forward compatibility.
type GophKeepServer interface {
	SaveCredentials(context.Context, *SaveCredentialsRequest) (*Status, error)
	SaveBankCredentials(context.Context, *SaveBankCredentialsRequest) (*Status, error)
	SaveFile(context.Context, *SaveFileRequest) (*SaveFileResponse, error)
	StartSaveFileStream(grpc.BidiStreamingServer[FileChunk, Status]) error
	GetCredentials(context.Context, *GetByMetaRequest) (*GetCredentialsResponse, error)
	GetBankCredentials(context.Context, *GetByMetaRequest) (*GetBankCredentialsResponse, error)
	GetFile(context.Context, *GetByMetaRequest) (*GetFileResponse, error)
	ListAll(context.Context, *ListAllRequest) (*ListAllResponse, error)
	mustEmbedUnimplementedGophKeepServer()
}

// UnimplementedGophKeepServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGophKeepServer struct{}

func (UnimplementedGophKeepServer) SaveCredentials(context.Context, *SaveCredentialsRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCredentials not implemented")
}
func (UnimplementedGophKeepServer) SaveBankCredentials(context.Context, *SaveBankCredentialsRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBankCredentials not implemented")
}
func (UnimplementedGophKeepServer) SaveFile(context.Context, *SaveFileRequest) (*SaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedGophKeepServer) StartSaveFileStream(grpc.BidiStreamingServer[FileChunk, Status]) error {
	return status.Errorf(codes.Unimplemented, "method StartSaveFileStream not implemented")
}
func (UnimplementedGophKeepServer) GetCredentials(context.Context, *GetByMetaRequest) (*GetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedGophKeepServer) GetBankCredentials(context.Context, *GetByMetaRequest) (*GetBankCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankCredentials not implemented")
}
func (UnimplementedGophKeepServer) GetFile(context.Context, *GetByMetaRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedGophKeepServer) ListAll(context.Context, *ListAllRequest) (*ListAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedGophKeepServer) mustEmbedUnimplementedGophKeepServer() {}
func (UnimplementedGophKeepServer) testEmbeddedByValue()                  {}

// UnsafeGophKeepServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeepServer will
// result in compilation errors.
type UnsafeGophKeepServer interface {
	mustEmbedUnimplementedGophKeepServer()
}

func RegisterGophKeepServer(s grpc.ServiceRegistrar, srv GophKeepServer) {
	// If the following call pancis, it indicates UnimplementedGophKeepServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GophKeep_ServiceDesc, srv)
}

func _GophKeep_SaveCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeepServer).SaveCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeep_SaveCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeepServer).SaveCredentials(ctx, req.(*SaveCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeep_SaveBankCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBankCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeepServer).SaveBankCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeep_SaveBankCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeepServer).SaveBankCredentials(ctx, req.(*SaveBankCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeep_SaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeepServer).SaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeep_SaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeepServer).SaveFile(ctx, req.(*SaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeep_StartSaveFileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GophKeepServer).StartSaveFileStream(&grpc.GenericServerStream[FileChunk, Status]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GophKeep_StartSaveFileStreamServer = grpc.BidiStreamingServer[FileChunk, Status]

func _GophKeep_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeepServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeep_GetCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeepServer).GetCredentials(ctx, req.(*GetByMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeep_GetBankCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeepServer).GetBankCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeep_GetBankCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeepServer).GetBankCredentials(ctx, req.(*GetByMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeep_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeepServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeep_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeepServer).GetFile(ctx, req.(*GetByMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeep_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeepServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeep_ListAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeepServer).ListAll(ctx, req.(*ListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophKeep_ServiceDesc is the grpc.ServiceDesc for GophKeep service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeep_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GophKeep",
	HandlerType: (*GophKeepServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveCredentials",
			Handler:    _GophKeep_SaveCredentials_Handler,
		},
		{
			MethodName: "SaveBankCredentials",
			Handler:    _GophKeep_SaveBankCredentials_Handler,
		},
		{
			MethodName: "SaveFile",
			Handler:    _GophKeep_SaveFile_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _GophKeep_GetCredentials_Handler,
		},
		{
			MethodName: "GetBankCredentials",
			Handler:    _GophKeep_GetBankCredentials_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _GophKeep_GetFile_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _GophKeep_ListAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartSaveFileStream",
			Handler:       _GophKeep_StartSaveFileStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/gophkeep.proto",
}
